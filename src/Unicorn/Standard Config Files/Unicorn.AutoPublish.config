<!--
	Unicorn Auto Publish Configuration

	This file configures the Unicorn serialization system to automatically publish items that it syncs.

	This file should be removed on content delivery environments.

	https://github.com/SitecoreUnicorn/Unicorn
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
	<sitecore role:require="Standalone or ContentManagement">
		<pipelines>
			<!--
				When using manual trigger of the publishing the following processor can be added to load the Queue after app restarts
				<initialize>
					<processor type="Unicorn.Pipelines.Initialize.ManualQueuePersistence, Unicorn" />
				</initialize>
			-->

			<unicornSyncComplete>
				<!-- at the end of each configuration's sync, we throw the items it changed into ManualPublishQueueHandler's queue -->
				<processor type="Unicorn.Pipelines.UnicornSyncComplete.AddSyncedItemsToPublishQueue, Unicorn" />
			</unicornSyncComplete>

			<unicornSyncEnd>
				<!-- 
					When all configurations have synced, fire off a publish that processes the queue we've accumulated.
					Alternatively you can disable this processor and call the Unicorn Control Panel with the "Publish" verb for control over the timing of this publish.
				-->
				<processor type="Unicorn.Pipelines.UnicornSyncEnd.TriggerAutoPublishSyncedItems, Unicorn">
					<PublishTriggerItemId>/sitecore/templates/Common/Folder</PublishTriggerItemId>
					<!-- the trigger item can be any leaf node Sitecore item - just has to have a 'starting point' for the publish -->
					<!-- these are the database(s) to publish synced items to -->
					<TargetDatabases hint="list:AddTargetDatabase">
						<web>web</web>
					</TargetDatabases>
				</processor>
				<!--
					When using manual trigger of the publishing the following processor can be added to persist the Queue across app restarts
					<processor type="Unicorn.Pipelines.UnicornSyncEnd.ManualQueuePersistence, Unicorn" />
				-->
			</unicornSyncEnd>

			<publish>
				<!--
					This handler manually injects arbitrary items into the publish queue so that the next publish to occur will cause the injected items to get published. 
					See https://www.velir.com/blog/2013/11/22/how-create-custom-publish-queue-sitecore et. al.
				-->
				<!-- if for some reasons you do not have buckets enabled and/or if you have ~\App_Config\Sitecore\Buckets\Buckets.config disabled, use the below patch instead
					<processor patch:after="*[@type='Sitecore.Publishing.Pipelines.Publish.AddItemsToQueue, Sitecore.Kernel']" type="Unicorn.Publishing.ManualPublishQueueHandler, Unicorn"/>
				 -->
				<processor patch:after="*[@type='Sitecore.Publishing.Pipelines.Publish.AddBucketFoldersToQueue, Sitecore.Buckets']" type="Unicorn.Publishing.ManualPublishQueueHandler, Unicorn"/>
			</publish>
		</pipelines>
		<settings>
			<!--
				Unicorn will use Publish Manager for items publishing, which routes items publishing through Sitecore publishing service, in case it is used. 
				Default value is true (if not specified). This setting is required for Sitecore versions lower then 8
			-->
			<setting name="Unicorn.UsePublishManager" value="true" />
			<!--
				There is no uniform way to learn, if we are using publishing service or not (even setting PublishingServiceUrlRoot have changed between versions :( ). Publishing service ignores publish queue and we need to build own queue for it when building handle for PublishManager -> hence, we need a separate setting for this.
			-->
			<setting name="Unicorn.UsePublishingService" value="false" />
			<!--
				If we have synced more that items number in this setting - it is faster to queue just smart publish in Publishing service than queueing individual items.
			-->
			<setting name="Unicorn.PublishingServiceMaxItemsToQueue" value="50" />
		</settings>
	</sitecore>
</configuration>
